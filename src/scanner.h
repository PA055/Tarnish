#ifndef tarnish_scanner_h
#define tarnish_scanner_h

typedef enum {
  // Single-character tokens.
  TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
  TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
  TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
  TOKEN_COLON, TOKEN_COMMA, TOKEN_DOT, 
  TOKEN_QUESTION, TOKEN_SEMICOLON, TOKEN_TILDE,

  // One or two character tokens.
  TOKEN_AND, TOKEN_AND_EQUAL,
  TOKEN_BANG, TOKEN_BANG_EQUAL,
  TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
  TOKEN_OR, TOKEN_OR_EQUAL,
  TOKEN_SLASH, TOKEN_SLASH_EQUAL,
  TOKEN_XOR, TOKEN_XOR_EQUAL,

  // One to three character tokens.
  TOKEN_MINUS, TOKEN_MINUS_MINUS, TOKEN_MINUS_EQUAL,
  TOKEN_PLUS, TOKEN_PLUS_PLUS, TOKEN_PLUS_EQUAL,

  TOKEN_GREATER_GREATER, TOKEN_GREATER_GREATER_EQUAL,
  TOKEN_GREATER, TOKEN_GREATER_EQUAL,
  TOKEN_LESS_LESS, TOKEN_LESS_LESS_EQUAL,
  TOKEN_LESS, TOKEN_LESS_EQUAL,
  TOKEN_PERCENT_PERCENT, TOKEN_PERCENT_PERCENT_EQUAL,
  TOKEN_PERCENT, TOKEN_PERCENT_EQUAL,
  TOKEN_STAR_STAR, TOKEN_STAR_STAR_EQUAL,
  TOKEN_STAR, TOKEN_STAR_EQUAL,

  // Literals.
  TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_FLOAT, TOKEN_INT,

  // Keywords.
  TOKEN_KEYWORD_AND, TOKEN_KEYWORD_CLASS,
  TOKEN_KEYWORD_ELSE, TOKEN_KEYWORD_FALSE,
  TOKEN_KEYWORD_FOR, TOKEN_KEYWORD_FUNC,
  TOKEN_KEYWORD_IF, TOKEN_KEYWORD_NONE,
  TOKEN_KEYWORD_NOT, TOKEN_KEYWORD_OR,
  TOKEN_KEYWORD_PRINT, TOKEN_KEYWORD_RETURN,
  TOKEN_KEYWORD_SUPER, TOKEN_KEYWORD_THIS,
  TOKEN_KEYWORD_TRUE, TOKEN_KEYWORD_VAR,
  TOKEN_KEYWORD_WHILE,

  TOKEN_ERROR, TOKEN_EOF
} TokenType;

typedef struct {
    TokenType type;
    const char* start;
    int length;
    int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif // !tarnish_scanner_h
